import asyncio
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import PromptTemplate
from langchain.chat_models.gigachat import GigaChat
from langchain_core.runnables import RunnablePassthrough
from langchain.text_splitter import CharacterTextSplitter
from aiogram import types

from .auth import is_user_registered
from .dev_mode_tools import is_developer_mode_enabled
from .forms import Form
from .utils import remove_ws, format_docs, load_multiple
from .config import GIGACHAT_TOKEN, bot, dp, scenario_texts

storage = MemoryStorage()
chat = GigaChat(credentials=GIGACHAT_TOKEN, scope='GIGACHAT_API_CORP', verify_ssl_certs=False, profanity_check=False)


file_paths = [
    '/medical_helper/web/data/klinical_recomendation.pdf',
    '/medical_helper/web/data/klinical_recomendation_measles.pdf',
    '/medical_helper/web/data/klinical_recomendation_scarlet.pdf',
]


# file_paths = [
    # '/Users/maksimpugacev/PycharmProjects/django-on-docker/medical_helper/data/klinical_recomendation.pdf',
    # '/Users/maksimpugacev/PycharmProjects/django-on-docker/medical_helper/data/klinical_recomendation_measles.pdf',
    # '/Users/maksimpugacev/PycharmProjects/django-on-docker/medical_helper/data/klinical_recomendation_scarlet.pdf',
# ]

pages_py = load_multiple(file_paths)

text_splitter = CharacterTextSplitter(
    separator="\n",
    chunk_size=2000,
    chunk_overlap=150,
    length_function=len
)

docs = text_splitter.split_documents(pages_py)

docs = [remove_ws(d) for d in docs]

vectors = Chroma.from_documents(
    documents=docs,
    embedding=HuggingFaceEmbeddings(
        model_name='intfloat/multilingual-e5-base',
    ),
)


retriever = vectors.as_retriever()
template = """
–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –æ–ø—ã—Ç–Ω—ã–π –±–æ—Ç –≤—Ä–∞—á, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤—Å–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç, —Å–∫–∞–∂–∏—Ç–µ –æ–± —ç—Ç–æ–º, –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç.

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
–í–æ–ø—Ä–æ—Å: {question}

–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ
"""


@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç c –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–µ–ª–∫—Ç–æ–º.\n"
        "–Ø –ø—Ä–∏–∑–≤–∞–Ω –ø–æ–º–æ–≥–∞—Ç—å –≤—Ä–∞—á–∞–º —Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ª–µ—á–µ–Ω–∏—è!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /registration –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤—ã –≤—Ä–∞—á üë®‚ÄçüíäüíâÔ∏è"
    )


@dp.message_handler(commands=['script'])
async def choose_scenario(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row(types.KeyboardButton('1'), types.KeyboardButton('2'), types.KeyboardButton('3'),
               types.KeyboardButton('4'), types.KeyboardButton('5'))
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:\n"
        "–°—Ü–µ–Ω–∞—Ä–∏–π 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–∏–º–ø—Ç–æ–º–∞–º.\n"
        "–°—Ü–µ–Ω–∞—Ä–∏–π 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø—Ä–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–º –¥–∏–∞–≥–Ω–æ–∑–µ.\n"
        "–°—Ü–µ–Ω–∞—Ä–∏–π 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–º –¥–∏–∞–≥–Ω–æ–∑–µ.\n"
        "–°—Ü–µ–Ω–∞—Ä–∏–π 4: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è-—Å–æ–≤–µ—Ç –ø–æ —Å–¥–∞—á–µ –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞.\n"
        "–°—Ü–µ–Ω–∞—Ä–∏–π 5: –û–±—â–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n",
        reply_markup=markup
    )
    await Form.scenario.set()


@dp.message_handler(commands=['registration'])
async def request_email(message: types.Message):
    await Form.email.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:")


@dp.message_handler(commands=['check_mode'])
async def check_developer_mode(message: types.Message):
    dev_mode_enabled = await is_developer_mode_enabled(message.from_user.id)
    # await message.answer(f"–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ {'–≤–∫–ª—é—á–µ–Ω' if dev_mode_enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}.")
    return '–≤–∫–ª—é—á–µ–Ω' if dev_mode_enabled else '–≤—ã–∫–ª—é—á–µ–Ω'


@dp.message_handler(commands=['mode'], state='*')
async def toggle_developer_mode(message: types.Message, state: FSMContext):
    if not await is_user_registered(message.chat.id):
        await message.reply("–≠—Ç–∞ —Ñ–∏—á–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row(types.KeyboardButton('–î–∞'), types.KeyboardButton('–ù–µ—Ç'))
    await Form.developer_mode.set()
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞?\n"
             "–≠—Ç–æ –í–∞–º –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∏–¥–µ—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç, –∞ —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞üí°\n"
             f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {await check_developer_mode(message)}",
        reply_markup=markup,
    )


@dp.message_handler()
async def answer_question(message: types.Message):
    user_question = message.text
    await find_closest_match(user_question, message.chat.id)


async def find_closest_match(user_question: str, chat_id: int):
    qa_prompt = PromptTemplate(template=template, input_variables=['context', 'question'])
    rag_chain = (
            {"context": retriever | format_docs, "question": RunnablePassthrough()}
            | qa_prompt
            | chat
            | StrOutputParser()
    )
    response = rag_chain.invoke(user_question)
    await bot.send_message(chat_id, response)


@dp.message_handler(state=Form.scenario)
async def set_scenario(message: types.Message, state: FSMContext):
    global template

    selected_scenario = message.text
    if selected_scenario in scenario_texts:
        template = scenario_texts[selected_scenario][0]
        await message.answer(scenario_texts[selected_scenario][1])
        await state.finish()
    else:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")


if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))
